import './oldApp.svelte.css';
/* src/oldApp.svelte generated by Svelte v3.43.1 */
import {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	listen,
	mount_component,
	null_to_empty,
	run_all,
	safe_not_equal,
	space,
	text,
	transition_in,
	transition_out
} from "../_snowpack/pkg/svelte.internal.v3.43.1.js";

import "./components/globals/Theme.svelte.js";
import Bar from './components/Bar.svelte.js';
import Base from './components/Base.svelte.js';
import Footer from './components/Footer.svelte.js';
import { faThumbsUp } from '../_snowpack/pkg/@fortawesome.free-regular-svg-icons.v5.15.4.js';
import { faRedoAlt, faUndoAlt } from '../_snowpack/pkg/@fortawesome.free-solid-svg-icons.v5.15.4.js';
import Icon from '../_snowpack/pkg/svelte-awesome.v2.4.2.js';

// import Icon from 'svelte-awesome/components/Icon.svelte'
// https://fontawesome.com/icons?d=gallery&q=video&s=regular,solid&m=free
import { refresh, comment, codeFork, camera, ban } from '../_snowpack/pkg/svelte-awesome.icons.v2.4.2.js';

import {
	fastForward,
	fastBackward,
	circle,
	play,
	pause,
	stop,
	eject
} from '../_snowpack/pkg/svelte-awesome.icons.v2.4.2.js';

function create_else_block_1(ctx) {
	let t;

	return {
		c() {
			t = text("Pause");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (111:6) {#if !isRecording}
function create_if_block_1(ctx) {
	let t;

	return {
		c() {
			t = text("Record");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (131:6) {:else}
function create_else_block(ctx) {
	let t;

	return {
		c() {
			t = text("Stop");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (129:6) {#if !isRecording}
function create_if_block(ctx) {
	let t;

	return {
		c() {
			t = text("Play");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment(ctx) {
	let div2;
	let div0;
	let bar;
	let t0;
	let div1;
	let button0;
	let t1;
	let span;
	let icon0;
	let span_class_value;
	let button0_class_value;
	let t2;
	let button1;
	let t3;
	let icon1;
	let button1_class_value;
	let t4;
	let footer;
	let current;
	let mounted;
	let dispose;
	bar = new Bar({});

	function select_block_type(ctx, dirty) {
		if (!/*isRecording*/ ctx[1]) return create_if_block_1;
		return create_else_block_1;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block0 = current_block_type(ctx);
	icon0 = new Icon({ props: { data: circle } });

	function select_block_type_1(ctx, dirty) {
		if (!/*isRecording*/ ctx[1]) return create_if_block;
		return create_else_block;
	}

	let current_block_type_1 = select_block_type_1(ctx, -1);
	let if_block1 = current_block_type_1(ctx);

	icon1 = new Icon({
			props: {
				data: !/*isRecording*/ ctx[1] ? play : stop,
				class: "text-red-900"
			}
		});

	footer = new Footer({});

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			create_component(bar.$$.fragment);
			t0 = space();
			div1 = element("div");
			button0 = element("button");
			if_block0.c();
			t1 = space();
			span = element("span");
			create_component(icon0.$$.fragment);
			t2 = space();
			button1 = element("button");
			if_block1.c();
			t3 = space();
			create_component(icon1.$$.fragment);
			t4 = space();
			create_component(footer.$$.fragment);
			attr(div0, "class", "app svelte-xh0kwa");

			attr(span, "class", span_class_value = "" + (null_to_empty(/*isRecording*/ ctx[1]
			? 'pulsate-fwd text-red-900'
			: 'text-orange-900') + " svelte-xh0kwa"));

			attr(button0, "class", button0_class_value = "button " + (/*current*/ ctx[0] == 'RecordBtn'
			? 'bg-red-700 pushed-down'
			: 'bg-red-500 hover:border-red-400 border-b-4') + " w-32 text-white font-bold py-2 px-4 border-b-4 border-red-700 hover:border-red-500 rounded" + " svelte-xh0kwa");

			attr(button1, "class", button1_class_value = "button " + (/*current*/ ctx[0] == 'PlayBtn' && toggleEffect
			? 'bg-red-700 pushed-down'
			: 'bg-red-500 border-b-4') + " w-32 hover:bg-red-600 text-white font-bold py-2 px-4 border-red-700 hover:border-red-500 rounded" + " svelte-xh0kwa");

			attr(div1, "class", "bar svelte-xh0kwa");
			attr(div2, "class", "wrapper svelte-xh0kwa");
			attr(div2, "data-theme", "customTheme");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			mount_component(bar, div0, null);
			append(div2, t0);
			append(div2, div1);
			append(div1, button0);
			if_block0.m(button0, null);
			append(button0, t1);
			append(button0, span);
			mount_component(icon0, span, null);
			append(div1, t2);
			append(div1, button1);
			if_block1.m(button1, null);
			append(button1, t3);
			mount_component(icon1, button1, null);
			insert(target, t4, anchor);
			mount_component(footer, target, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*click_handler*/ ctx[2]),
					listen(button1, "click", /*click_handler_1*/ ctx[3])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (current_block_type !== (current_block_type = select_block_type(ctx, dirty))) {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(button0, t1);
				}
			}

			if (!current || dirty & /*isRecording*/ 2 && span_class_value !== (span_class_value = "" + (null_to_empty(/*isRecording*/ ctx[1]
			? 'pulsate-fwd text-red-900'
			: 'text-orange-900') + " svelte-xh0kwa"))) {
				attr(span, "class", span_class_value);
			}

			if (!current || dirty & /*current*/ 1 && button0_class_value !== (button0_class_value = "button " + (/*current*/ ctx[0] == 'RecordBtn'
			? 'bg-red-700 pushed-down'
			: 'bg-red-500 hover:border-red-400 border-b-4') + " w-32 text-white font-bold py-2 px-4 border-b-4 border-red-700 hover:border-red-500 rounded" + " svelte-xh0kwa")) {
				attr(button0, "class", button0_class_value);
			}

			if (current_block_type_1 !== (current_block_type_1 = select_block_type_1(ctx, dirty))) {
				if_block1.d(1);
				if_block1 = current_block_type_1(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(button1, t3);
				}
			}

			const icon1_changes = {};
			if (dirty & /*isRecording*/ 2) icon1_changes.data = !/*isRecording*/ ctx[1] ? play : stop;
			icon1.$set(icon1_changes);

			if (!current || dirty & /*current*/ 1 && button1_class_value !== (button1_class_value = "button " + (/*current*/ ctx[0] == 'PlayBtn' && toggleEffect
			? 'bg-red-700 pushed-down'
			: 'bg-red-500 border-b-4') + " w-32 hover:bg-red-600 text-white font-bold py-2 px-4 border-red-700 hover:border-red-500 rounded" + " svelte-xh0kwa")) {
				attr(button1, "class", button1_class_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(bar.$$.fragment, local);
			transition_in(icon0.$$.fragment, local);
			transition_in(icon1.$$.fragment, local);
			transition_in(footer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(bar.$$.fragment, local);
			transition_out(icon0.$$.fragment, local);
			transition_out(icon1.$$.fragment, local);
			transition_out(footer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			destroy_component(bar);
			if_block0.d();
			destroy_component(icon0);
			if_block1.d();
			destroy_component(icon1);
			if (detaching) detach(t4);
			destroy_component(footer, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

let toggleEffect = false;

function instance($$self, $$props, $$invalidate) {
	let current = '';
	let isRecording = false;

	const click_handler = () => {
		$$invalidate(1, isRecording = !isRecording);
		$$invalidate(0, current = current == 'RecordBtn' ? '' : 'RecordBtn');
	};

	const click_handler_1 = () => $$invalidate(0, current = current == 'PlayBtn' ? '' : 'PlayBtn');
	return [current, isRecording, click_handler, click_handler_1];
}

class OldApp extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default OldApp;