import './App.svelte.css';
/* src/App.svelte generated by Svelte v3.43.1 */
import {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	globals,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../_snowpack/pkg/svelte.internal.v3.43.1.js";

const { document: document_1 } = globals;
import "./components/globals/Theme.svelte.js";
import Button from "./components/Button.svelte.js";
import { faThumbsUp } from '../_snowpack/pkg/@fortawesome.free-regular-svg-icons.v5.15.4.js';
import { faRedoAlt, faUndoAlt } from '../_snowpack/pkg/@fortawesome.free-solid-svg-icons.v5.15.4.js';
import Icon from '../_snowpack/pkg/svelte-awesome.v2.4.2.js';

// https://fontawesome.com/icons?d=gallery&q=video&s=regular,solid&m=free
import { refresh, comment, codeFork, camera, ban } from '../_snowpack/pkg/svelte-awesome.icons.v2.4.2.js';

import {
	fastForward,
	fastBackward,
	circle,
	play,
	pause,
	stop,
	eject
} from '../_snowpack/pkg/svelte-awesome.icons.v2.4.2.js';

function create_fragment(ctx) {
	let link0;
	let link1;
	let t0;
	let div14;
	let div0;
	let button0;
	let t1;
	let button1;
	let t2;
	let button2;
	let t3;
	let button3;
	let t4;
	let button4;
	let t5;
	let button5;
	let t6;
	let div3;
	let div1;
	let button6;
	let t7;
	let button7;
	let t8;
	let button8;
	let t9;
	let div2;
	let button9;
	let t10;
	let button10;
	let t11;
	let div7;
	let div4;
	let button11;
	let t12;
	let button12;
	let t13;
	let div5;
	let button13;
	let t14;
	let button14;
	let t15;
	let div6;
	let button15;
	let t16;
	let div10;
	let div8;
	let button16;
	let t17;
	let button17;
	let t18;
	let div9;
	let button18;
	let t19;
	let div13;
	let div11;
	let button19;
	let t20;
	let button20;
	let t21;
	let button21;
	let t22;
	let button22;
	let t23;
	let div12;
	let button23;
	let current;

	button0 = new Button({
			props: {
				text: "Merge All",
				iconData: "i-merge",
				tooltipText: "Merges all open windows into one",
				tooltipPosition: "left"
			}
		});

	button1 = new Button({
			props: {
				text: "Merge last 2",
				iconData: "i-merge",
				iconStyle: "transform: rotate(45deg);"
			}
		});

	button2 = new Button({
			props: { text: "Sort All", iconData: "i-sort-all" }
		});

	button3 = new Button({
			props: { text: "Sort Current", iconData: "i-sort" }
		});

	button4 = new Button({
			props: { text: "Focus", iconData: "i-target" }
		});

	button5 = new Button({
			props: { text: "UnFocus", iconData: "i-focus-1" }
		});

	button6 = new Button({
			props: {
				text: "Split V",
				iconData: "i-split",
				tooltipText: "Split the Current window Vertically and the resulting window side by side",
				tooltipPosition: "left"
			}
		});

	button7 = new Button({
			props: { text: "Shuffle", iconData: "i-shuffle" }
		});

	button8 = new Button({
			props: { text: "Stack", iconData: "i-undo" }
		});

	button9 = new Button({
			props: {
				text: "Split H",
				iconData: "i-split",
				iconStyle: "transform: rotate(-90deg);"
			}
		});

	button10 = new Button({
			props: {
				text: "Split Domains",
				iconData: "i-flow-merge",
				wrapperClass: "col-span-2"
			}
		});

	button11 = new Button({
			props: {
				text: "Unite",
				iconData: "i-unite-3",
				tooltipText: "Split the Current window Vertically and the resulting window side by side",
				tooltipPosition: "left"
			}
		});

	button12 = new Button({
			props: { text: "Isolate", iconData: "i-isolate" }
		});

	button13 = new Button({
			props: { text: "Freeze", iconData: "i-microchip" }
		});

	button14 = new Button({
			props: { text: "Close", iconData: "i-cancel-2" }
		});

	button15 = new Button({
			props: {
				text: "Load",
				iconData: "i-upload-outline",
				wrapperClass: "col-span-3"
			}
		});

	button16 = new Button({
			props: {
				text: "Save All",
				iconData: "i-save",
				tooltipText: "Save all open windows",
				tooltipPosition: "left"
			}
		});

	button17 = new Button({
			props: {
				text: "Save Current",
				iconData: "i-save",
				tooltipText: "Save the current window",
				tooltipPosition: "right"
			}
		});

	button18 = new Button({
			props: {
				text: "Remove Duplicates",
				iconData: "i-clone",
				wrapperClass: "col-span-3"
			}
		});

	button19 = new Button({
			props: {
				text: "GitHub",
				iconData: "i-github",
				disableText: true,
				tooltipText: "Stay updated!",
				tooltipPosition: "left"
			}
		});

	button20 = new Button({
			props: {
				text: "Email",
				iconData: "i-paper-plane",
				disableText: true,
				tooltipText: "email me :)",
				tooltipPosition: "top"
			}
		});

	button21 = new Button({
			props: {
				text: "Help",
				iconData: "i-help",
				disableText: true,
				tooltipText: "Need help?",
				tooltipPosition: "top"
			}
		});

	button22 = new Button({
			props: {
				text: "Options",
				iconData: "i-options",
				tooltipText: "Configure Your TS2",
				tooltipPosition: "right",
				wrapperClass: "col-span-2"
			}
		});

	button23 = new Button({
			props: {
				text: "ManageSub",
				iconData: "i-settings",
				wrapperClass: "col-span-3",
				disable: true
			}
		});

	return {
		c() {
			link0 = element("link");
			link1 = element("link");
			t0 = space();
			div14 = element("div");
			div0 = element("div");
			create_component(button0.$$.fragment);
			t1 = space();
			create_component(button1.$$.fragment);
			t2 = space();
			create_component(button2.$$.fragment);
			t3 = space();
			create_component(button3.$$.fragment);
			t4 = space();
			create_component(button4.$$.fragment);
			t5 = space();
			create_component(button5.$$.fragment);
			t6 = space();
			div3 = element("div");
			div1 = element("div");
			create_component(button6.$$.fragment);
			t7 = space();
			create_component(button7.$$.fragment);
			t8 = space();
			create_component(button8.$$.fragment);
			t9 = space();
			div2 = element("div");
			create_component(button9.$$.fragment);
			t10 = space();
			create_component(button10.$$.fragment);
			t11 = space();
			div7 = element("div");
			div4 = element("div");
			create_component(button11.$$.fragment);
			t12 = space();
			create_component(button12.$$.fragment);
			t13 = space();
			div5 = element("div");
			create_component(button13.$$.fragment);
			t14 = space();
			create_component(button14.$$.fragment);
			t15 = space();
			div6 = element("div");
			create_component(button15.$$.fragment);
			t16 = space();
			div10 = element("div");
			div8 = element("div");
			create_component(button16.$$.fragment);
			t17 = space();
			create_component(button17.$$.fragment);
			t18 = space();
			div9 = element("div");
			create_component(button18.$$.fragment);
			t19 = space();
			div13 = element("div");
			div11 = element("div");
			create_component(button19.$$.fragment);
			t20 = space();
			create_component(button20.$$.fragment);
			t21 = space();
			create_component(button21.$$.fragment);
			t22 = space();
			create_component(button22.$$.fragment);
			t23 = space();
			div12 = element("div");
			create_component(button23.$$.fragment);
			attr(link0, "rel", "stylesheet");
			attr(link0, "href", "https://unpkg.com/mono-icons@1.3.1/iconfont/icons.css");
			attr(link1, "rel", "stylesheet");
			attr(link1, "href", "../tabsorter2.css");
			attr(div0, "class", "app container mx-auto w-1/3 grid grid-cols-2 grid-rows-3 gap-x-2 gap-y-2 svelte-1qfscsj");
			attr(div1, "class", "grid grid-cols-3 grid-rows-1 gap-x-1");
			attr(div2, "class", "grid grid-cols-3 grid-rows-1 gap-x-1");
			attr(div3, "class", "app container mx-auto w-1/3 grid grid-rows-2 gap-x-2 gap-y-2 grid-flow-col svelte-1qfscsj");
			attr(div4, "class", "grid grid-cols-2 grid-rows-1 gap-x-1 gap-y-2");
			attr(div5, "class", "grid grid-cols-2 grid-rows-1 gap-x-1 gap-y-2");
			attr(div6, "class", "grid grid-cols-3 grid-rows-1");
			attr(div7, "class", "app container mx-auto w-1/3 grid grid-rows-3 gap-x-2 gap-y-2 grid-flow-col svelte-1qfscsj");
			attr(div8, "class", "grid grid-cols-2 grid-rows-1 gap-x-1 gap-y-2");
			attr(div9, "class", "grid grid-cols-3 grid-rows-1");
			attr(div10, "class", "app container mx-auto w-1/3 grid grid-rows-2 gap-x-2 gap-y-2 grid-flow-col svelte-1qfscsj");
			attr(div11, "class", "grid grid-cols-5 grid-rows-1 gap-x-1 gap-y-2");
			attr(div12, "class", "grid grid-cols-1 grid-rows-1");
			attr(div13, "class", "app container mx-auto w-1/3 grid grid-rows-2 gap-x-2 gap-y-2 grid-flow-col svelte-1qfscsj");
			attr(div14, "class", "");
		},
		m(target, anchor) {
			append(document_1.head, link0);
			append(document_1.head, link1);
			insert(target, t0, anchor);
			insert(target, div14, anchor);
			append(div14, div0);
			mount_component(button0, div0, null);
			append(div0, t1);
			mount_component(button1, div0, null);
			append(div0, t2);
			mount_component(button2, div0, null);
			append(div0, t3);
			mount_component(button3, div0, null);
			append(div0, t4);
			mount_component(button4, div0, null);
			append(div0, t5);
			mount_component(button5, div0, null);
			append(div14, t6);
			append(div14, div3);
			append(div3, div1);
			mount_component(button6, div1, null);
			append(div1, t7);
			mount_component(button7, div1, null);
			append(div1, t8);
			mount_component(button8, div1, null);
			append(div3, t9);
			append(div3, div2);
			mount_component(button9, div2, null);
			append(div2, t10);
			mount_component(button10, div2, null);
			append(div14, t11);
			append(div14, div7);
			append(div7, div4);
			mount_component(button11, div4, null);
			append(div4, t12);
			mount_component(button12, div4, null);
			append(div7, t13);
			append(div7, div5);
			mount_component(button13, div5, null);
			append(div5, t14);
			mount_component(button14, div5, null);
			append(div7, t15);
			append(div7, div6);
			mount_component(button15, div6, null);
			append(div14, t16);
			append(div14, div10);
			append(div10, div8);
			mount_component(button16, div8, null);
			append(div8, t17);
			mount_component(button17, div8, null);
			append(div10, t18);
			append(div10, div9);
			mount_component(button18, div9, null);
			append(div14, t19);
			append(div14, div13);
			append(div13, div11);
			mount_component(button19, div11, null);
			append(div11, t20);
			mount_component(button20, div11, null);
			append(div11, t21);
			mount_component(button21, div11, null);
			append(div11, t22);
			mount_component(button22, div11, null);
			append(div13, t23);
			append(div13, div12);
			mount_component(button23, div12, null);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			transition_in(button2.$$.fragment, local);
			transition_in(button3.$$.fragment, local);
			transition_in(button4.$$.fragment, local);
			transition_in(button5.$$.fragment, local);
			transition_in(button6.$$.fragment, local);
			transition_in(button7.$$.fragment, local);
			transition_in(button8.$$.fragment, local);
			transition_in(button9.$$.fragment, local);
			transition_in(button10.$$.fragment, local);
			transition_in(button11.$$.fragment, local);
			transition_in(button12.$$.fragment, local);
			transition_in(button13.$$.fragment, local);
			transition_in(button14.$$.fragment, local);
			transition_in(button15.$$.fragment, local);
			transition_in(button16.$$.fragment, local);
			transition_in(button17.$$.fragment, local);
			transition_in(button18.$$.fragment, local);
			transition_in(button19.$$.fragment, local);
			transition_in(button20.$$.fragment, local);
			transition_in(button21.$$.fragment, local);
			transition_in(button22.$$.fragment, local);
			transition_in(button23.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			transition_out(button2.$$.fragment, local);
			transition_out(button3.$$.fragment, local);
			transition_out(button4.$$.fragment, local);
			transition_out(button5.$$.fragment, local);
			transition_out(button6.$$.fragment, local);
			transition_out(button7.$$.fragment, local);
			transition_out(button8.$$.fragment, local);
			transition_out(button9.$$.fragment, local);
			transition_out(button10.$$.fragment, local);
			transition_out(button11.$$.fragment, local);
			transition_out(button12.$$.fragment, local);
			transition_out(button13.$$.fragment, local);
			transition_out(button14.$$.fragment, local);
			transition_out(button15.$$.fragment, local);
			transition_out(button16.$$.fragment, local);
			transition_out(button17.$$.fragment, local);
			transition_out(button18.$$.fragment, local);
			transition_out(button19.$$.fragment, local);
			transition_out(button20.$$.fragment, local);
			transition_out(button21.$$.fragment, local);
			transition_out(button22.$$.fragment, local);
			transition_out(button23.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			detach(link0);
			detach(link1);
			if (detaching) detach(t0);
			if (detaching) detach(div14);
			destroy_component(button0);
			destroy_component(button1);
			destroy_component(button2);
			destroy_component(button3);
			destroy_component(button4);
			destroy_component(button5);
			destroy_component(button6);
			destroy_component(button7);
			destroy_component(button8);
			destroy_component(button9);
			destroy_component(button10);
			destroy_component(button11);
			destroy_component(button12);
			destroy_component(button13);
			destroy_component(button14);
			destroy_component(button15);
			destroy_component(button16);
			destroy_component(button17);
			destroy_component(button18);
			destroy_component(button19);
			destroy_component(button20);
			destroy_component(button21);
			destroy_component(button22);
			destroy_component(button23);
		}
	};
}

let currentState = false;
let toggleEffect = true;
let active = false;

// thanks to https://stackoverflow.com/a/44562952/623546 :) 
function swapNodes(n1, n2) {
	Array.from(document.querySelectorAll('.tab.tab-lifted')).map(t => t && t.classList.remove('tab-active'));
	n1.classList.add('tab-active');
	var p1 = n1.parentNode;
	var p2 = n2.parentNode;
	var i1, i2;
	if (!p1 || !p2 || p1.isEqualNode(n2) || p2.isEqualNode(n1)) return;

	for (var i = 0; i < p1.children.length; i++) {
		if (p1.children[i].isEqualNode(n1)) {
			i1 = i;
		}
	}

	for (var i = 0; i < p2.children.length; i++) {
		if (p2.children[i].isEqualNode(n2)) {
			i2 = i;
		}
	}

	if (p1.isEqualNode(p2) && i1 < i2) {
		i2++;
	}

	p1.insertBefore(n2, p1.children[i1]);
	p2.insertBefore(n1, p2.children[i2]);
}

function instance($$self) {
	let activateThisTab = e => {
		console.log(e);
		Array.from(document.querySelectorAll('.tab.tab-lifted')).map(t => t && t.classList.remove('tab-active'));
		e.target.classList.add('tab-active');
	};

	let decode = mStr => {
		to_be_deleted = []; // '2->x'
		to_be_created = []; // '2->n'
		to_be_swapped = []; // '2<->3'

		mStr.split(',').map(s => {
			let [src, dest] = s.replaceAll(' ', '').split('->');

			switch (dest) {
				case 'x':
					to_be_deleted.push(src);
					break;
				case 'n':
					to_be_created.push(src);
					break;
				default:
					if (s.includes('<->')) {
						[src, dest] = s.replaceAll(' ', '').split('<->');
					}
					break;
			} // to_be_swapped.push([[src, dest], [dest, src]])
		});

		return [to_be_deleted, to_be_created, to_be_swapped];
	};

	'1<->2,2->x,3<->1,3<->4';

	let swap = (tabStr, mappingString) => {
		const [d, c, sp] = decode(mappingString);
		tabStr;

		sp.map(e => {
			[e[0], e[1]] = [e[1], e[0]];
		});

		return sp;
	};

	return [];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;