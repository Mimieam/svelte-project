import './Button.svelte.css';
/* src/components/Button.svelte generated by Svelte v3.43.1 */
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	null_to_empty,
	safe_not_equal,
	set_data,
	space,
	text as text_1
} from "../../_snowpack/pkg/svelte.internal.v3.43.1.js";

import "./globals/Theme.svelte.js";
import Icon from '../../_snowpack/pkg/svelte-awesome.v2.4.2.js';

import {
	fastForward,
	fastBackward,
	circle,
	play,
	pause,
	stop,
	eject
} from '../../_snowpack/pkg/svelte-awesome.icons.v2.4.2.js';

function create_if_block(ctx) {
	let span;
	let t;

	return {
		c() {
			span = element("span");
			t = text_1(/*text*/ ctx[2]);
			attr(span, "class", "ts-innerLabel");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty & /*text*/ 4) set_data(t, /*text*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let button;
	let i;
	let i_class_value;
	let t;
	let button_class_value;
	let div_class_value;
	let mounted;
	let dispose;
	let if_block = !/*disableText*/ ctx[7] && create_if_block(ctx);

	return {
		c() {
			div = element("div");
			button = element("button");
			i = element("i");
			t = space();
			if (if_block) if_block.c();
			attr(i, "class", i_class_value = "" + (null_to_empty(`ts-icon ${/*iconData*/ ctx[1]}`) + " svelte-vs02yr"));
			attr(i, "style", /*iconStyle*/ ctx[6]);

			attr(button, "class", button_class_value = "button " + (/*currentState*/ ctx[0] == 'Pressed'
			? 'bg-primary-focus transform translate-y-1.5'
			: 'bg-primary solid_shadow solid_shadow:hover') + " w-full h-9 rounded-lg text-center text-sm font-normal border-primary-focus hover:border-primary hover:bg-primary-focus place-items-center place-content-center flex " + (/*disable*/ ctx[8]
			? 'disabled text-gray-600 bg-gray-300 hover:text-gray-600'
			: 'text-red-900 text-white hover:text-white') + "" + " svelte-vs02yr");

			attr(div, "data-tip", /*tooltipText*/ ctx[4]);

			attr(div, "class", div_class_value = "" + ((/*tooltipText*/ ctx[4]
			? `tooltip tooltip-accent tooltip-${/*tooltipPosition*/ ctx[5]}`
			: '') + " " + /*wrapperClass*/ ctx[3] + " svelte-vs02yr"));
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, button);
			append(button, i);
			append(button, t);
			if (if_block) if_block.m(button, null);

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler*/ ctx[9]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*iconData*/ 2 && i_class_value !== (i_class_value = "" + (null_to_empty(`ts-icon ${/*iconData*/ ctx[1]}`) + " svelte-vs02yr"))) {
				attr(i, "class", i_class_value);
			}

			if (dirty & /*iconStyle*/ 64) {
				attr(i, "style", /*iconStyle*/ ctx[6]);
			}

			if (!/*disableText*/ ctx[7]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(button, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*currentState, disable*/ 257 && button_class_value !== (button_class_value = "button " + (/*currentState*/ ctx[0] == 'Pressed'
			? 'bg-primary-focus transform translate-y-1.5'
			: 'bg-primary solid_shadow solid_shadow:hover') + " w-full h-9 rounded-lg text-center text-sm font-normal border-primary-focus hover:border-primary hover:bg-primary-focus place-items-center place-content-center flex " + (/*disable*/ ctx[8]
			? 'disabled text-gray-600 bg-gray-300 hover:text-gray-600'
			: 'text-red-900 text-white hover:text-white') + "" + " svelte-vs02yr")) {
				attr(button, "class", button_class_value);
			}

			if (dirty & /*tooltipText*/ 16) {
				attr(div, "data-tip", /*tooltipText*/ ctx[4]);
			}

			if (dirty & /*tooltipText, tooltipPosition, wrapperClass*/ 56 && div_class_value !== (div_class_value = "" + ((/*tooltipText*/ ctx[4]
			? `tooltip tooltip-accent tooltip-${/*tooltipPosition*/ ctx[5]}`
			: '') + " " + /*wrapperClass*/ ctx[3] + " svelte-vs02yr"))) {
				attr(div, "class", div_class_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { currentState = false } = $$props;
	let { iconData = true ? play : stop } = $$props;
	let { text = '' } = $$props;
	let { wrapperClass = '' } = $$props;
	let { tooltipText = '' } = $$props;
	let { tooltipPosition = 'right' } = $$props;
	let { iconStyle = '' } = $$props;
	let { disableText = false } = $$props;
	let { disable = false } = $$props;
	const click_handler = () => $$invalidate(0, currentState = currentState == 'Pressed' ? '' : 'Pressed');

	$$self.$$set = $$props => {
		if ('currentState' in $$props) $$invalidate(0, currentState = $$props.currentState);
		if ('iconData' in $$props) $$invalidate(1, iconData = $$props.iconData);
		if ('text' in $$props) $$invalidate(2, text = $$props.text);
		if ('wrapperClass' in $$props) $$invalidate(3, wrapperClass = $$props.wrapperClass);
		if ('tooltipText' in $$props) $$invalidate(4, tooltipText = $$props.tooltipText);
		if ('tooltipPosition' in $$props) $$invalidate(5, tooltipPosition = $$props.tooltipPosition);
		if ('iconStyle' in $$props) $$invalidate(6, iconStyle = $$props.iconStyle);
		if ('disableText' in $$props) $$invalidate(7, disableText = $$props.disableText);
		if ('disable' in $$props) $$invalidate(8, disable = $$props.disable);
	};

	return [
		currentState,
		iconData,
		text,
		wrapperClass,
		tooltipText,
		tooltipPosition,
		iconStyle,
		disableText,
		disable,
		click_handler
	];
}

class Button extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			currentState: 0,
			iconData: 1,
			text: 2,
			wrapperClass: 3,
			tooltipText: 4,
			tooltipPosition: 5,
			iconStyle: 6,
			disableText: 7,
			disable: 8
		});
	}
}

export default Button;